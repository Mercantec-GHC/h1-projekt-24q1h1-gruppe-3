@page "/productlist"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Gamers Lounge: Product List</PageTitle>

<!-- Search funktion and btn -->
<div class="ProductListTop">
    <h3 class="ProductListTitle">ProductList</h3>
</div>

<!-- Show amount of products -->
<h5 class="productsCount">Total products: <b class="textColor">@DB.allItems.Count</b></h5>

<!-- Filter: Select platform and choose between highest or lowest price order -->
<div>
    <label>
        <select @bind="platform">
            <option value="">Select Platform</option>
            <option value="All">All</option>
            <option value="PC">PC</option>
            <option value="PS">PS</option>
            <option value="XBOX">XBOX</option>
        </select>
    </label>
</div>

<div>
    <label>
        <select @bind="price">
            <option value="">Price Status</option>
            <option value="High">Highest</option>
            <option value="Low">Lowest</option>
        </select>
    </label>
</div>

@if (platform is not null)
{
    if (platform == "All")
    {
        gamesToShow = DB.allItems.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
    }
    else if (platform == "PC")
    {
        gamesToShow = FT.FiltreToPC_Games(DB.allItems).Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList(); ;
    }
    else if (platform == "PS")
    {
        gamesToShow = FT.FiltreToPS_Games(DB.allItems).Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList(); ;
    }
    else if (platform == "XBOX")
    {
        gamesToShow = FT.FiltreToXBOX_Games(DB.allItems).Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList(); ;
    }
}

@if (price is not null)
{
    if (price == "High")
    {
        foreach (var game in gamesToShow)
        {
            gamesToShow = gamesToShow.OrderByDescending(game => game.price).ToList();
        }
    }
    else if (price == "Low")
    {
        foreach (var game in gamesToShow)
        {
            gamesToShow = gamesToShow.OrderBy(game => game.price).ToList();
        }
    }
}

<!-- Show the products -->
<div class="container">
    <Listing Games="gamesToShow"></Listing>
</div>

<!--   Page  -->
<div class="pagination">
    <button class="pageBtn" @onclick="() => { currentPage = currentPage - 1; UpdatePage(currentPage); }" disabled="@(currentPage == 1)"> ◄ </button>
    <span class="pageBtnText">Page @currentPage - @totalPages</span>
    <button class="pageBtn" @onclick="() => { currentPage = currentPage + 1; UpdatePage(currentPage); }" disabled="@(currentPage >= totalPages)"> ► </button>
</div>



@code {
    public List<Item> gamesToShow;
    public string platform;
    public string price;

    // Modal
    bool ShowModal { get; set; }


    // Switch between pages variables
    public int currentPage = 1;
    public const int itemsPerPage = 9;
    public int totalPages;


    protected override void OnInitialized()
    {
        // Calculate items to show based on current page
        gamesToShow = DB.allItems.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
        // Calculate total pages
        totalPages = (int)Math.Ceiling((double)DB.allItems.Count / itemsPerPage);
    }

    private void UpdatePage(int page)
    {
        if (page < 1 || page > totalPages)
        {
            return;
        }

        currentPage = page;
        gamesToShow = DB.allItems.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
        StateHasChanged();
    }

   
}
