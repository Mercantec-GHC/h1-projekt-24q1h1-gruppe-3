@page "/productlist"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using Service
@inject AuthenticationService AuthenticationService


<PageTitle>Gamers Lounge: Product List</PageTitle>

<!-- Search funktion and btn -->
<div class="ProductListTop">
    <h3 class="ProductListTitle">ProductList</h3>
    <button class="searchBtn" @onclick="ToggleSearch">
        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
        </svg>
    </button>
    <Search OnSearch="HandleSearch" showSearch="@showSearch" searchText="@searchText"></Search>
</div>

<!-- Show amount of products -->
<h5 class="productsCount">Total products: <b class="textColor">@DB.allItems.Count</b></h5>

<!-- Filter: Select platform and choose between highest or lowest price order -->
<div>
    <label>
        <select @bind="platform">
            <option value="">Select Platform</option>
            <option value="All">All</option>
            <option value="PC">PC</option>
            <option value="PS">PS</option>
            <option value="XBOX">XBOX</option>
        </select>
    </label>
</div>

<div>
    <label>
        <select @bind="price">
            <option value="">Price Status</option>
            <option value="High">Highest</option>
            <option value="Low">Lowest</option>
        </select>
    </label>
</div>

@if (platform is not null)
{
    if (platform == "All")
    {
        gamesToShow = DB.allItems.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
    }
    else if (platform == "PC")
    {
        gamesToShow = FT.FiltreToPC_Games(DB.allItems).Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList(); ;
    }
    else if (platform == "PS")
    {
        gamesToShow = FT.FiltreToPS_Games(DB.allItems).Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList(); ;
    }
    else if (platform == "XBOX")
    {
        gamesToShow = FT.FiltreToXBOX_Games(DB.allItems).Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList(); ;
    }
}

@if (price is not null)
{
    if (price == "High")
    {
        foreach (var game in gamesToShow)
        {
            gamesToShow = gamesToShow.OrderByDescending(game => game.price).ToList();
        }
    }
    else if (price == "Low")
    {
        foreach (var game in gamesToShow)
        {
            gamesToShow = gamesToShow.OrderBy(game => game.price).ToList();
        }
    }
}

<!-- Show the products -->
<div class="container">
    <Listing Games="gamesToShow" OnAddToFavorites="AddToFavorites"></Listing>
</div>

<!--   Page  -->
<div class="pagination">
    <button class="pageBtn" @onclick="() => { currentPage = currentPage - 1; UpdatePage(currentPage); }" disabled="@(currentPage == 1)"> ◄ </button>
    <span class="pageBtnText">Page @currentPage - @totalPages</span>
    <button class="pageBtn" @onclick="() => { currentPage = currentPage + 1; UpdatePage(currentPage); }" disabled="@(currentPage >= totalPages)"> ► </button>
</div>



@code {
    public List<int> favoriteGames = new List<int>();
    public List<Item> gamesToShow;
    public string platform;
    public string price;

    // Modal
    bool ShowModal { get; set; }


    // Switch between pages variables
    private int currentPage = 1;
    private const int itemsPerPage = 9;
    private int totalPages;

    // Search variables
    public bool showSearch = false;
    public string searchText = "";

    public void ToggleSearch()
    {
        showSearch = !showSearch;
    }

    protected override void OnInitialized()
    {
        // Calculate items to show based on current page
        gamesToShow = DB.allItems.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
        // Calculate total pages
        totalPages = (int)Math.Ceiling((double)DB.allItems.Count / itemsPerPage);
    }

    private void UpdatePage(int page)
    {
        if (page < 1 || page > totalPages)
        {
            return;
        }

        currentPage = page;
        gamesToShow = DB.allItems.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
        StateHasChanged();
    }

    // Search funktion
    private void HandleSearch(string searchText)
    {
        currentPage = 1;

        if (string.IsNullOrWhiteSpace(searchText))
        {
            gamesToShow = DB.allItems.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
            totalPages = (int)Math.Ceiling((double)DB.allItems.Count / itemsPerPage);
        }
        else
        {
            gamesToShow = DB.allItems
            .Where(game => game.gameName.ToLower().Contains(searchText.ToLower()))
            .OrderBy(game => game.gameName)
            .ToList();

            totalPages = (int)Math.Ceiling((double)gamesToShow.Count / itemsPerPage);
        }

        StateHasChanged();
    }

    // Add to favorites
    private async Task AddToFavorites(Item game)
    {
        favoriteGames = (DB.GetFavoritesByUserID(AuthenticationService.CurrentUser.userID));        
        if (!favoriteGames.Contains(game.itemID))
        {
            favoriteGames.Add(game.itemID);
            await JSRuntime.InvokeVoidAsync("alert", $"{game.gameName}, er tilføjet til favoritter");
            DB.AddItemToFavoriteInUsers(AuthenticationService.CurrentUser.userID, game.itemID, favoriteGames);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", $"{game.gameName}, er allerede tilføjet til favoritter");
        }
    }
}
