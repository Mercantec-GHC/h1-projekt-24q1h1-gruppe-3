@using Service
@inject AuthenticationService AuthenticationService

@page "/profilepage/{userID}"

<PageTitle>Gamers Lounge: Profile Page</PageTitle>

<div class="body">
    <div class="card">
        <div class="container text-center">
            <div class="row">
                <div class="col" id="colLeft">
                    <div class="ProfileContainer">
                        <img src="./Picture/img_avatar.png" alt="Avatar">
                            <div class="ProfileDetails">
                            @if (editProfileinfo == true)
                            {
                                <label class="label">Name:</label>
                                <input type="text" class="form-control" id="name" placeholder="@userToShow.name" @bind="updatedName">
                                <label class="label">Email:</label>
                                <input type="email" class="form-control" id="Email" placeholder="@userToShow.email" @bind="updatedEmail">
                                <label class="label">Password:</label>
                                <input type="text" class="form-control" id="City" placeholder="@userToShow.password" @bind="updatedPassword">
                                <label class="label">Phone number:</label>
                                <input type="tel" class="form-control" id="PhoneNumber" placeholder="@userToShow.phoneNumber" @bind="updatedPhoneNumber">
                                <label class="label">City:</label>
                                <input type="text" class="form-control" id="City" placeholder="@userToShow.city" @bind="updatedCity">
                                <button class="btn btn-dark saveInfoBtn" @onclick="saveInfo">Save information</button>
                                <button class="btn btn-dark cancelInfoBtn" @onclick="cancelsaveInfo">Cancel</button>
                            }
                            else{
                                
                                <p>Name: @userToShow.name </p>
                                <p>Phone number: @userToShow.phoneNumber</p>
                                <p>Email: @userToShow.email</p>
                                <p>City: @userToShow.city</p>
                                @if (AuthenticationService.IsAuthenticated)
                                {
                                    <button class="btn btn-dark editProfileBtn" @onclick="editProfile">Edit Profile</button>
                                }
                            }

                            </div>

                    </div>


                </div>

                <div class="col-2">
                </div>
                <div class="col">
                    @if (editProfileinfo == true)
                    {
                        <button class="btn btn-danger deleteProfileBtn" @onclick="deleteConfirmationModal">Delete profile and all user infomation</button>
                        @if (deleteConfirmation == true)
                        {
                            <div class="modal" tabindex="-1" style="display:block;">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Confirm your choice</h5>

                                        </div>
                                        <div class="modal-body">
                                            <p>Are you sure you wish to delete your profile and all of your information?</p>
                                            <p class="warning"> WARNING:</p>
                                            <p class="warning">You will NOT be able to undo your decision!</p>
                                            <div id="buttonContainer">
                                                <button type="button" id="yesbtn" class="btn btn-danger" @onclick="DeleteUserAndItsItems">Yes</button>
                                                <button type="button" id="Listed" class="btn btn-dark" @onclick="closeDeleteConfirmationModal">No</button>
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-dark" @onclick="closeDeleteConfirmationModal">Close</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
            <hr> <!-- Horisontal linje under knappen -->

            <div class="row">
                <div class="col">

                </div>
                <div class="col-8">
                    @if (AuthenticationService.IsAuthenticated)
                    {
                        <button class="btn btn-dark" @onclick="expandListin">See your listings here</button>
                        <button class="btn btn-dark" @onclick="expandFavListin">See your favorites here</button>
                    }

                    @if (Listexpandable == true)
                    {
                        <Listing Games="itemsForUserToShow"></Listing>
                    }
                    @if (favlistexpandable == true)
                    {
                        <FavoriteListing userID="userToShow.userID"></FavoriteListing>
                    }
                </div>
                <div class="col">

                </div>
            </div>
        </div>
    </div>
</div>


@code {
    public User userToShow;

    [Parameter]
    public string userID { get; set; }

    public List<Item> itemsForUserToShow;

    bool Listexpandable = false;

    bool favlistexpandable = false;

    bool editProfileinfo = false;

    bool deleteConfirmation = false;

    public string updatedName;
    public string updatedPhoneNumber;
    public string updatedEmail;
    public string updatedCity;
    public string updatedPassword;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            int parsedUserID;
            if (int.TryParse(userID, out parsedUserID))
            {
                userToShow = DB.GetAllUser().FirstOrDefault(user => user.userID == parsedUserID);
                itemsForUserToShow = DB.GetListedSalesForUser(parsedUserID);
            }
            else
            {
                // Handle invalid userID
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }   

    public void expandListin()
    {
        if (Listexpandable == false)
        {
            Listexpandable = true;
            favlistexpandable = false;
            editProfileinfo = false;

        }
        else
        {
            Listexpandable = false;
        }
    }

    public void expandFavListin()
    {
        if (favlistexpandable == false)
        {
            favlistexpandable = true;
            Listexpandable = false;
            editProfileinfo = false;
        }
        else
        {
            favlistexpandable = false;
        }
    }

    public void editProfile()
    {
        if (editProfileinfo == false)
        {
            editProfileinfo = true;
            Listexpandable = false;
            favlistexpandable = false;
        }
    }

    public void saveInfo()
    {
        // Opdater brugerens information i databasen
        DB.UpdateUserInDatabase(userToShow.userID, updatedName, updatedEmail, updatedPassword, updatedPhoneNumber, updatedCity);

        // Opdater brugerens information i komponenten
        userToShow.name = updatedName;
        userToShow.phoneNumber = updatedPhoneNumber;
        userToShow.email = updatedEmail;
        userToShow.city = updatedCity;

        // Skift til visningsmodus
        editProfileinfo = false;
    }

    public void cancelsaveInfo()
    {
        editProfileinfo = false;
    }

    public void deleteConfirmationModal()
    {
        deleteConfirmation = true;
    }

    public void closeDeleteConfirmationModal()
    {
        deleteConfirmation = false;
    }

    public async Task DeleteUserAndItsItems()
    {
        // Valider brugerinput eller sikkerhed før sletning
        // For eksempel: Bekræft, at brugeren virkelig ønsker at slette sin profil

        // Slet brugeren og deres spil
        DB.DeleteUserAndItsItems(userToShow.userID);

        AuthenticationService.Logout();
        NavigationManager.NavigateTo("/login");
    }


   
}