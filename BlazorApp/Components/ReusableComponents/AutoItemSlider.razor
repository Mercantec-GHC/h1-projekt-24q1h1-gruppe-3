@inject NavigationManager NavigationManager
@inject List<Item> allData
@page "/slider"


@* <div class="button">
	<a href="" class="btn" @onclick="PreviousGame">Previous</a>
	<a href="" class="btn" @onclick="NextGame">Next</a>
</div> *@
<div class="btns">
	<a class="prevbtn" @onclick="PreviousGame">
		<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="#212529" class="bi bi-arrow-left-circle" viewBox="0 0 16 16">
			<path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8m15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0m-4.5-.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5z" />
		</svg>
	</a>
	<a class="nxtbtn" @onclick="NextGame">
		<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="#212529" class="bi bi-arrow-right-circle" viewBox="0 0 16 16">
			<path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8m15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0M4.5 7.5a.5.5 0 0 0 0 1h5.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5z" />
		</svg>
	</a>
</div>

<style>
	.bi-arrow-left-circle {
		color: #FF0000; /* Red color */
	}
	.game {
		color: #FF0000;
	}
</style>

<div class="carousel">
	@for (var i = 0; i < gamesToShow.Count; i++)
	{
		<div class="carousel-item @(currentIndexPC == i ? "active" : "")">
			<div class="card-body-bottom" @onclick="@( () => HandleCardClick(gamesToShow[i].itemID) )">
				<h4 class="game">PC</h4>
				<img src="./Picture/Temp_Picture.jpg" class="image" />
				<h4 class="game">@gamesToShow[i].gameName</h4>
				<p class="game">@gamesToShow[i].genre</p>
				<p class="game">€ @gamesToShow[i].price</p>
			</div>
		</div>
	}
</div>

@code {

	public List<PC_Game> gamesToShow;
	public int currentIndexPC = 1;

	protected override void OnInitialized()
	{
		gamesToShow = FiltreToPC_Games(allData);
	}

	protected override async Task OnInitializedAsync()
	{
		await AutoClickNextGame();
	}

	private async Task AutoClickNextGame()
	{
		// Call this method again to repeat the process
	}

	private void NextGame()
	{
		currentIndexPC = (currentIndexPC + 1) % gamesToShow.Count;
	}

	private void PreviousGame()
	{
		currentIndexPC = (currentIndexPC - 1 + gamesToShow.Count) % gamesToShow.Count;
	}

	public List<PC_Game> FiltreToPC_Games(List<Item> games)
	{
		List<PC_Game> pcGameToShow = new List<PC_Game>();

		foreach (var game in games)
		{
			if (game is PC_Game pcGame)
			{
				pcGameToShow.Add(pcGame);
			}
		}
		return pcGameToShow;
	}


	private void HandleCardClick(int gameID)
	{
		NavigationManager.NavigateTo($"/product/{gameID}");
	}
}
