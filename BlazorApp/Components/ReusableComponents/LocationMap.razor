@page "/location"
@implements IAsyncDisposable
@inject IJSRuntime JS
@using GoogleMaps.LocationServices

<HeadContent>
    <link href="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css" rel="stylesheet" />
</HeadContent>

<h1>Hej med Dig!</h1>

<div @ref="mapElement" style='width:400px;height:300px'></div>
<a class="btn btn-dark" @onclick="() => ShowAsync(latitude,longitude)">Show Seller Location</a>

@code {

    [Parameter]
    public int userID { get; set; }

    public User userInfo;
    public double latitude;
    public double longitude;

    protected override void OnInitialized()
    {
        foreach (var user in DB.allUsers)
        {
            if (user.userID == userID)
            {
                userInfo = user;
            }
        }
        ConvertCityToLatLong();
    }

    public void ConvertCityToLatLong()
    {
        var address = userInfo.city + ", Denmark";

        var locationService = new GoogleLocationService();
        var point = locationService.GetLatLongFromAddress(address);

        latitude = point.Latitude;
        longitude = point.Longitude;
    }

    private ElementReference mapElement;
    private IJSObjectReference? mapModule;
    private IJSObjectReference? mapInstance;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            mapModule = await JS.InvokeAsync<IJSObjectReference>("import", "/Picture/mapComponent.js");
            mapInstance = await mapModule.InvokeAsync<IJSObjectReference>("addMapToElement", mapElement);
        }
    }

    private async Task ShowAsync(double latitude, double longitude)
    {
        if (mapModule is not null && mapInstance is not null)
        {
            await mapModule.InvokeVoidAsync("setMapCenter", mapInstance,
                latitude, longitude).AsTask();
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (mapInstance is not null)
        {
            await mapInstance.DisposeAsync();
        }

        if (mapModule is not null)
        {
            await mapModule.DisposeAsync();
        }
    }
}